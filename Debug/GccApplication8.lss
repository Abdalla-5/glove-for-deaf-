
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  000007ba  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001706  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081a  00000000  00000000  000020c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bbd  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  000034a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f7  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bd9  00000000  00000000  00003b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
  7a:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
#include "DIO_interface (1).h" 


void DIO_setPinDirection (u8 PortId ,u8 PinId ,u8 PinDirection)
{
 if ((PortId<=3)&&(PinId<=7)&&((DIO_PIN_output==PinDirection)||(DIO_PIN_input==PinDirection)))
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
 {
  switch(PortId)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
  {
	  case DIO_PORTA:   //2         //mmkn switch gowa switch bas 3shan mantla8batsh
	     if (DIO_PIN_output==PinDirection)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
		 {
			 SET_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		 }
		 else  
		 {
			CLEAR_BIT(DDRA,PinId) ;
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
		 }
	  break;
	  
	  case DIO_PORTB://2
	   if (DIO_PIN_output==PinDirection)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
	   {
		   SET_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
	   }
	   else
	   {
		   CLEAR_BIT(DDRB,PinId) ;
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
	   }
	  break;
	  
	  case DIO_PORTC:
	   if (DIO_PIN_output==PinDirection)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
	   {
		   SET_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
	   }
	   else
	   {
		   CLEAR_BIT(DDRC,PinId) ;
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
	   }
	  break;
	  
	  case DIO_PORTD:
	   if (DIO_PIN_output==PinDirection)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
	   {
		   SET_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
	   }
	   else
	   {
		   CLEAR_BIT(DDRD,PinId) ;
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
 }
}

void DIO_setPinValue (u8 PortId ,u8 PinId ,u8 PinValue)
{
if ((PortId<=3)&&(PinId<=7)&&((DIO_PIN_HIGH==PinValue)||(DIO_PIN_LOW==PinValue)))
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
{
	switch(PortId)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
	{
		case DIO_PORTA://0
		if (DIO_PIN_HIGH==PinValue)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
		{
			SET_BIT(PORTA,PinId);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinId);
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
		}
		break;
case DIO_PORTB:
if (DIO_PIN_HIGH==PinValue)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
{
	SET_BIT(PORTB,PinId);
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
}
else
{
	CLEAR_BIT(PORTB,PinId);
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
}

break;
case DIO_PORTC:
if (DIO_PIN_HIGH==PinValue)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
{
	SET_BIT(PORTC,PinId);
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
}
else
{
	CLEAR_BIT(PORTC,PinId);
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
}
	break;
	case DIO_PORTD:
	if (DIO_PIN_HIGH==PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
	{
		SET_BIT(PORTD,PinId);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTD,PinId);
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <DIO_getPinValue>:
	}
  }	
}
void DIO_getPinValue (u8 PortId ,u8 PinId ,u8* PinValue ) //mmkn return u8 bas void a7san
{
	if ((PortId<=3)&&(PinId<=7)&&(PinValue!=NULL))
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	c0 f5       	brcc	.+112    	; 0x2ce <DIO_getPinValue+0x74>
 25e:	68 30       	cpi	r22, 0x08	; 8
 260:	b0 f5       	brcc	.+108    	; 0x2ce <DIO_getPinValue+0x74>
 262:	41 15       	cp	r20, r1
 264:	51 05       	cpc	r21, r1
 266:	99 f1       	breq	.+102    	; 0x2ce <DIO_getPinValue+0x74>
	{
		switch (PortId)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	89 f0       	breq	.+34     	; 0x28e <DIO_getPinValue+0x34>
 26c:	28 f0       	brcs	.+10     	; 0x278 <DIO_getPinValue+0x1e>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	c9 f0       	breq	.+50     	; 0x2a4 <DIO_getPinValue+0x4a>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	11 f1       	breq	.+68     	; 0x2ba <DIO_getPinValue+0x60>
 276:	08 95       	ret
		{
			case DIO_PORTA:
			
			*PinValue =READ_BIT(PINA,PinId);
 278:	89 b3       	in	r24, 0x19	; 25
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_getPinValue+0x28>
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_getPinValue+0x24>
 286:	81 70       	andi	r24, 0x01	; 1
 288:	fa 01       	movw	r30, r20
 28a:	80 83       	st	Z, r24
			
			break;
 28c:	08 95       	ret
			
			
			
			case DIO_PORTB:
			
			*PinValue =READ_BIT(PINB,PinId);
 28e:	86 b3       	in	r24, 0x16	; 22
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_getPinValue+0x3e>
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_getPinValue+0x3a>
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	fa 01       	movw	r30, r20
 2a0:	80 83       	st	Z, r24
			
			break;
 2a2:	08 95       	ret
			
			case DIO_PORTC:
			
			*PinValue =READ_BIT(PINC,PinId);
 2a4:	83 b3       	in	r24, 0x13	; 19
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_getPinValue+0x54>
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_getPinValue+0x50>
 2b2:	81 70       	andi	r24, 0x01	; 1
 2b4:	fa 01       	movw	r30, r20
 2b6:	80 83       	st	Z, r24
			
			break;
 2b8:	08 95       	ret
			
			
			case DIO_PORTD:
			
			*PinValue =READ_BIT(PIND,PinId);
 2ba:	80 b3       	in	r24, 0x10	; 16
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_getPinValue+0x6a>
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_getPinValue+0x66>
 2c8:	81 70       	andi	r24, 0x01	; 1
 2ca:	fa 01       	movw	r30, r20
 2cc:	80 83       	st	Z, r24
 2ce:	08 95       	ret

000002d0 <LCD_write_half_port>:
	
	
}

void LCD_write_half_port(u8 value)
{
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
	if (1==READ_BIT(value,0))
 2d4:	80 ff       	sbrs	r24, 0
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <LCD_write_half_port+0x14>
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	64 e0       	ldi	r22, 0x04	; 4
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <LCD_write_half_port+0x1e>
		
	}
	else
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_LOW);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	64 e0       	ldi	r22, 0x04	; 4
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	
	
	if (1==READ_BIT(value,1))
 2ee:	c1 ff       	sbrs	r28, 1
 2f0:	06 c0       	rjmp	.+12     	; 0x2fe <LCD_write_half_port+0x2e>
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <LCD_write_half_port+0x38>
		
	}
	else
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_LOW);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	65 e0       	ldi	r22, 0x05	; 5
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	
	
	
	if (1==READ_BIT(value,2))
 308:	c2 ff       	sbrs	r28, 2
 30a:	06 c0       	rjmp	.+12     	; 0x318 <LCD_write_half_port+0x48>
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	66 e0       	ldi	r22, 0x06	; 6
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 316:	05 c0       	rjmp	.+10     	; 0x322 <LCD_write_half_port+0x52>
		
	}
	else
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_LOW);
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	}
	
	

if (1==READ_BIT(value,3))
 322:	c3 ff       	sbrs	r28, 3
 324:	06 c0       	rjmp	.+12     	; 0x332 <LCD_write_half_port+0x62>
{
	DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	67 e0       	ldi	r22, 0x07	; 7
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 330:	05 c0       	rjmp	.+10     	; 0x33c <LCD_write_half_port+0x6c>
	
}
else
{
	DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	67 e0       	ldi	r22, 0x07	; 7
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
}


}
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <LCD_send_command>:
#include "config.h"
#define F_CPU 16000000
#include <util/delay.h>

void LCD_send_command(u8 command)
{
 340:	cf 93       	push	r28
 342:	c8 2f       	mov	r28, r24
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);  //SET RS PIN=0(WRITE COMMAND)
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);  //BEN5ALEEHA WRITE
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	LCD_write_half_port(command>>4);//write the most bits of command on pins
 358:	8c 2f       	mov	r24, r28
 35a:	82 95       	swap	r24
 35c:	8f 70       	andi	r24, 0x0F	; 15
 35e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write_half_port>
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);//enable start
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_send_command+0x30>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_send_command+0x36>
 376:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);//enable end (kont badeeha pulse high we b3d kda low we benhom delay)
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	63 e0       	ldi	r22, 0x03	; 3
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	LCD_write_half_port(command);
 382:	8c 2f       	mov	r24, r28
 384:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write_half_port>
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);//enable start
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 392:	8f e9       	ldi	r24, 0x9F	; 159
 394:	9f e0       	ldi	r25, 0x0F	; 15
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <LCD_send_command+0x56>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_send_command+0x5c>
 39c:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);//enable end (kont badeeha pulse high we b3d kda low we benhom delay)
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	// EB3AT ELMOST THEN DELAY THEN EB3AT EL LEAST (DA TAFSEER ELSOTOOR ELY FO2)
}
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <LCD_init>:
 3ac:	2f e7       	ldi	r18, 0x7F	; 127
 3ae:	85 eb       	ldi	r24, 0xB5	; 181
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <LCD_init+0x6>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_init+0x10>
 3bc:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(35);
	
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);  //SET RS PIN=0(WRITE COMMAND)
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);  //BEN5ALEEHA WRITE
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	LCD_write_half_port(0b0010);
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write_half_port>
	
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);//enable start
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	63 e0       	ldi	r22, 0x03	; 3
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_init+0x3a>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_init+0x40>
 3ec:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);//enable end (kont badeeha pulse high we b3d kda low we benhom delay)
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	LCD_send_command(0b00101000);   //(e5tarna elN be 1 wel f be 0)3shan n=line display wel f be 0 3shan sha8aleen 5x7
 3f8:	88 e2       	ldi	r24, 0x28	; 40
 3fa:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	90 ef       	ldi	r25, 0xF0	; 240
 400:	9a 95       	dec	r25
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
	_delay_us(45);
	LCD_send_command(0b00001111);//   (display on/off control)          d=0 (display off) welba2y ay haga dayman eld=1 lazemmm
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_send_command>
 40a:	20 ef       	ldi	r18, 0xF0	; 240
 40c:	2a 95       	dec	r18
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	_delay_us(45);
	LCD_send_command(0b00000001);//clear display 
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	9f e1       	ldi	r25, 0x1F	; 31
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	_delay_ms(2);
	LCD_send_command(0b00000110);//i/d increment mode =1 lazm(auto increment),,,s=0 3shan elshift
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_send_command>
 428:	08 95       	ret

0000042a <LCD_send_char>:
	
	
}

void LCD_send_char(u8 data)
{
 42a:	cf 93       	push	r28
 42c:	c8 2f       	mov	r28, r24
	
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);  //SET RS PIN=1(WRITE data)
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);  //BEN5ALEEHA WRITE
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	LCD_write_half_port(data>>4);//write the most bits of command on pins
 442:	8c 2f       	mov	r24, r28
 444:	82 95       	swap	r24
 446:	8f 70       	andi	r24, 0x0F	; 15
 448:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write_half_port>
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);//enable start
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	63 e0       	ldi	r22, 0x03	; 3
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 456:	8f e9       	ldi	r24, 0x9F	; 159
 458:	9f e0       	ldi	r25, 0x0F	; 15
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_send_char+0x30>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_send_char+0x36>
 460:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);//enable end (kont badeeha pulse high we b3d kda low we benhom delay)
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	63 e0       	ldi	r22, 0x03	; 3
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	
	LCD_write_half_port(data);//least bits
 46c:	8c 2f       	mov	r24, r28
 46e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_write_half_port>
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);//enable start
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 47c:	8f e9       	ldi	r24, 0x9F	; 159
 47e:	9f e0       	ldi	r25, 0x0F	; 15
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <LCD_send_char+0x56>
 484:	00 c0       	rjmp	.+0      	; 0x486 <LCD_send_char+0x5c>
 486:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);//enable end (kont badeeha pulse high we b3d kda low we benhom delay)
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	63 e0       	ldi	r22, 0x03	; 3
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	// EB3AT ELMOST THEN DELAY THEN EB3AT EL LEAST (DA TAFSEER ELSOTOOR ELY FO2)
	
	
	
}
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <LCD_writeString>:
}


}
void LCD_writeString(u8 *String)
{
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	8c 01       	movw	r16, r24
	u8 Local_stringLengh = 0;
 49e:	c0 e0       	ldi	r28, 0x00	; 0
	while (String[Local_stringLengh] != '\0')
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <LCD_writeString+0x12>
	{
		LCD_send_char(String[Local_stringLengh]);
 4a2:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_send_char>
		++ Local_stringLengh;
 4a6:	cf 5f       	subi	r28, 0xFF	; 255

}
void LCD_writeString(u8 *String)
{
	u8 Local_stringLengh = 0;
	while (String[Local_stringLengh] != '\0')
 4a8:	f8 01       	movw	r30, r16
 4aa:	ec 0f       	add	r30, r28
 4ac:	f1 1d       	adc	r31, r1
 4ae:	80 81       	ld	r24, Z
 4b0:	81 11       	cpse	r24, r1
 4b2:	f7 cf       	rjmp	.-18     	; 0x4a2 <LCD_writeString+0xc>
	{
		LCD_send_char(String[Local_stringLengh]);
		++ Local_stringLengh;
	}
}
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	08 95       	ret

000004bc <LCD_clear>:
void LCD_clear(void)
{
	// Clear Display
	LCD_send_command(0b00000001);
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_send_command>
 4c2:	8f e3       	ldi	r24, 0x3F	; 63
 4c4:	9f e1       	ldi	r25, 0x1F	; 31
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_clear+0xa>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_clear+0x10>
 4cc:	00 00       	nop
 4ce:	08 95       	ret

000004d0 <main>:




int main(void)
{
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <main+0x6>
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <main+0x8>
 4d8:	1f 92       	push	r1
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
	u8 *string5=("really love you");
	u8 *string6=("I love you");
	u8 *string7=("wonderfull");
	
	//lcd pins output
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_output);
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	64 e0       	ldi	r22, 0x04	; 4
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_output);
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	65 e0       	ldi	r22, 0x05	; 5
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_output);
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	66 e0       	ldi	r22, 0x06	; 6
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_output);
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	67 e0       	ldi	r22, 0x07	; 7
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_output);
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_output);
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	62 e0       	ldi	r22, 0x02	; 2
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_output);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	//sensors pins input
	DIO_setPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_input);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_input);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN4,DIO_PIN_input);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	64 e0       	ldi	r22, 0x04	; 4
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_input);
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	65 e0       	ldi	r22, 0x05	; 5
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_input);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	66 e0       	ldi	r22, 0x06	; 6
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	// UART_init();
	LCD_init();
 556:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_init>
	
	LCD_writeString(first_string);
 55a:	80 e6       	ldi	r24, 0x60	; 96
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	83 ed       	ldi	r24, 0xD3	; 211
 566:	90 e3       	ldi	r25, 0x30	; 48
 568:	21 50       	subi	r18, 0x01	; 1
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	90 40       	sbci	r25, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <main+0x98>
 570:	00 c0       	rjmp	.+0      	; 0x572 <main+0xa2>
 572:	00 00       	nop
	//ADC_init();
	_delay_ms(1000);
	LCD_clear();
 574:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
	LCD_writeString(second_string);
 578:	88 e6       	ldi	r24, 0x68	; 104
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	83 ed       	ldi	r24, 0xD3	; 211
 584:	90 e3       	ldi	r25, 0x30	; 48
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <main+0xb6>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0xc0>
 590:	00 00       	nop
	_delay_ms(1000);
	
	while (1)
	{
		
		LCD_clear();
 592:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
		
		DIO_getPinValue(DIO_PORTD,DIO_PIN2,&y1);
 596:	ae 01       	movw	r20, r28
 598:	4f 5f       	subi	r20, 0xFF	; 255
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
		
		DIO_getPinValue(DIO_PORTD,DIO_PIN3,&y2);
 5a4:	ae 01       	movw	r20, r28
 5a6:	4e 5f       	subi	r20, 0xFE	; 254
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
		
		DIO_getPinValue(DIO_PORTD,DIO_PIN4,&y3);
 5b2:	ae 01       	movw	r20, r28
 5b4:	4d 5f       	subi	r20, 0xFD	; 253
 5b6:	5f 4f       	sbci	r21, 0xFF	; 255
 5b8:	64 e0       	ldi	r22, 0x04	; 4
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
		
		DIO_getPinValue(DIO_PORTD,DIO_PIN5,&y4);
 5c0:	ae 01       	movw	r20, r28
 5c2:	4c 5f       	subi	r20, 0xFC	; 252
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	65 e0       	ldi	r22, 0x05	; 5
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
		
		DIO_getPinValue(DIO_PORTD,DIO_PIN6,&y5);
 5ce:	ae 01       	movw	r20, r28
 5d0:	4b 5f       	subi	r20, 0xFB	; 251
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	66 e0       	ldi	r22, 0x06	; 6
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	89 e6       	ldi	r24, 0x69	; 105
 5e0:	98 e1       	ldi	r25, 0x18	; 24
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x112>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0x11c>
 5ec:	00 00       	nop
		
		_delay_ms(500);
		if   (A1 && B1 && C1 && D1 && E1)
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	61 f4       	brne	.+24     	; 0x60c <main+0x13c>
 5f4:	9a 81       	ldd	r25, Y+2	; 0x02
 5f6:	91 30       	cpi	r25, 0x01	; 1
 5f8:	49 f4       	brne	.+18     	; 0x60c <main+0x13c>
 5fa:	9b 81       	ldd	r25, Y+3	; 0x03
 5fc:	91 30       	cpi	r25, 0x01	; 1
 5fe:	31 f4       	brne	.+12     	; 0x60c <main+0x13c>
 600:	9c 81       	ldd	r25, Y+4	; 0x04
 602:	91 30       	cpi	r25, 0x01	; 1
 604:	19 f4       	brne	.+6      	; 0x60c <main+0x13c>
 606:	9d 81       	ldd	r25, Y+5	; 0x05
 608:	91 30       	cpi	r25, 0x01	; 1
 60a:	19 f2       	breq	.-122    	; 0x592 <main+0xc2>
		{
			
		}
		//////////////////////////////////////////////////////
		else if  (A0 && B0 && C0 && D0 && E0)
 60c:	81 11       	cpse	r24, r1
 60e:	1c c0       	rjmp	.+56     	; 0x648 <main+0x178>
 610:	9a 81       	ldd	r25, Y+2	; 0x02
 612:	91 11       	cpse	r25, r1
 614:	19 c0       	rjmp	.+50     	; 0x648 <main+0x178>
 616:	9b 81       	ldd	r25, Y+3	; 0x03
 618:	91 11       	cpse	r25, r1
 61a:	16 c0       	rjmp	.+44     	; 0x648 <main+0x178>
 61c:	9c 81       	ldd	r25, Y+4	; 0x04
 61e:	91 11       	cpse	r25, r1
 620:	13 c0       	rjmp	.+38     	; 0x648 <main+0x178>
 622:	9d 81       	ldd	r25, Y+5	; 0x05
 624:	91 11       	cpse	r25, r1
 626:	10 c0       	rjmp	.+32     	; 0x648 <main+0x178>
		{
			LCD_clear();
 628:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
		
			LCD_writeString(string1);
 62c:	84 e7       	ldi	r24, 0x74	; 116
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	83 ed       	ldi	r24, 0xD3	; 211
 638:	90 e3       	ldi	r25, 0x30	; 48
 63a:	21 50       	subi	r18, 0x01	; 1
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x16a>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x174>
 644:	00 00       	nop
 646:	a5 cf       	rjmp	.-182    	; 0x592 <main+0xc2>
			
			_delay_ms(1000);
			
		}
		/////////////////////////////////////////////////////
		else if  (A1 && B0 && C1 && D1 && E1)
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	e1 f4       	brne	.+56     	; 0x684 <main+0x1b4>
 64c:	9a 81       	ldd	r25, Y+2	; 0x02
 64e:	91 11       	cpse	r25, r1
 650:	19 c0       	rjmp	.+50     	; 0x684 <main+0x1b4>
 652:	9b 81       	ldd	r25, Y+3	; 0x03
 654:	91 30       	cpi	r25, 0x01	; 1
 656:	b1 f4       	brne	.+44     	; 0x684 <main+0x1b4>
 658:	9c 81       	ldd	r25, Y+4	; 0x04
 65a:	91 30       	cpi	r25, 0x01	; 1
 65c:	99 f4       	brne	.+38     	; 0x684 <main+0x1b4>
 65e:	9d 81       	ldd	r25, Y+5	; 0x05
 660:	91 30       	cpi	r25, 0x01	; 1
 662:	81 f4       	brne	.+32     	; 0x684 <main+0x1b4>
		{
			LCD_clear();
 664:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
			
			LCD_writeString(string2);
 668:	8c ea       	ldi	r24, 0xAC	; 172
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 670:	2f ef       	ldi	r18, 0xFF	; 255
 672:	83 ed       	ldi	r24, 0xD3	; 211
 674:	90 e3       	ldi	r25, 0x30	; 48
 676:	21 50       	subi	r18, 0x01	; 1
 678:	80 40       	sbci	r24, 0x00	; 0
 67a:	90 40       	sbci	r25, 0x00	; 0
 67c:	e1 f7       	brne	.-8      	; 0x676 <main+0x1a6>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <main+0x1b0>
 680:	00 00       	nop
 682:	87 cf       	rjmp	.-242    	; 0x592 <main+0xc2>
			
			_delay_ms(1000);
			
		}
		////////////////////////////////////////////////////////////////
		else if  (A0 && B1 && C1 && D1 && E1)
 684:	81 11       	cpse	r24, r1
 686:	1c c0       	rjmp	.+56     	; 0x6c0 <main+0x1f0>
 688:	9a 81       	ldd	r25, Y+2	; 0x02
 68a:	91 30       	cpi	r25, 0x01	; 1
 68c:	c9 f4       	brne	.+50     	; 0x6c0 <main+0x1f0>
 68e:	9b 81       	ldd	r25, Y+3	; 0x03
 690:	91 30       	cpi	r25, 0x01	; 1
 692:	b1 f4       	brne	.+44     	; 0x6c0 <main+0x1f0>
 694:	9c 81       	ldd	r25, Y+4	; 0x04
 696:	91 30       	cpi	r25, 0x01	; 1
 698:	99 f4       	brne	.+38     	; 0x6c0 <main+0x1f0>
 69a:	9d 81       	ldd	r25, Y+5	; 0x05
 69c:	91 30       	cpi	r25, 0x01	; 1
 69e:	81 f4       	brne	.+32     	; 0x6c0 <main+0x1f0>
		{
			LCD_clear();
 6a0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
			
			LCD_writeString(string3);
 6a4:	8f e7       	ldi	r24, 0x7F	; 127
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 6ac:	2f ef       	ldi	r18, 0xFF	; 255
 6ae:	83 ed       	ldi	r24, 0xD3	; 211
 6b0:	90 e3       	ldi	r25, 0x30	; 48
 6b2:	21 50       	subi	r18, 0x01	; 1
 6b4:	80 40       	sbci	r24, 0x00	; 0
 6b6:	90 40       	sbci	r25, 0x00	; 0
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <main+0x1e2>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <main+0x1ec>
 6bc:	00 00       	nop
 6be:	69 cf       	rjmp	.-302    	; 0x592 <main+0xc2>
			
			_delay_ms(1000);
			
		}
		//////////////////////////////////////////////////////////////////
		else if  (A1 && B0 && C0 && D1 && E1)
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	e1 f4       	brne	.+56     	; 0x6fc <main+0x22c>
 6c4:	9a 81       	ldd	r25, Y+2	; 0x02
 6c6:	91 11       	cpse	r25, r1
 6c8:	19 c0       	rjmp	.+50     	; 0x6fc <main+0x22c>
 6ca:	9b 81       	ldd	r25, Y+3	; 0x03
 6cc:	91 11       	cpse	r25, r1
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <main+0x22c>
 6d0:	9c 81       	ldd	r25, Y+4	; 0x04
 6d2:	91 30       	cpi	r25, 0x01	; 1
 6d4:	99 f4       	brne	.+38     	; 0x6fc <main+0x22c>
 6d6:	9d 81       	ldd	r25, Y+5	; 0x05
 6d8:	91 30       	cpi	r25, 0x01	; 1
 6da:	81 f4       	brne	.+32     	; 0x6fc <main+0x22c>
		{
			LCD_clear();
 6dc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
			
			LCD_writeString(string4);
 6e0:	89 e8       	ldi	r24, 0x89	; 137
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 6e8:	2f ef       	ldi	r18, 0xFF	; 255
 6ea:	83 ed       	ldi	r24, 0xD3	; 211
 6ec:	90 e3       	ldi	r25, 0x30	; 48
 6ee:	21 50       	subi	r18, 0x01	; 1
 6f0:	80 40       	sbci	r24, 0x00	; 0
 6f2:	90 40       	sbci	r25, 0x00	; 0
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <main+0x21e>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <main+0x228>
 6f8:	00 00       	nop
 6fa:	4b cf       	rjmp	.-362    	; 0x592 <main+0xc2>
			
			_delay_ms(1000);
			
		}
		///////////////////////////////////////////////////////////////////
		else if  (A0 && B0 && C0 && D1 && E0)
 6fc:	81 11       	cpse	r24, r1
 6fe:	1c c0       	rjmp	.+56     	; 0x738 <main+0x268>
 700:	9a 81       	ldd	r25, Y+2	; 0x02
 702:	91 11       	cpse	r25, r1
 704:	19 c0       	rjmp	.+50     	; 0x738 <main+0x268>
 706:	9b 81       	ldd	r25, Y+3	; 0x03
 708:	91 11       	cpse	r25, r1
 70a:	16 c0       	rjmp	.+44     	; 0x738 <main+0x268>
 70c:	9c 81       	ldd	r25, Y+4	; 0x04
 70e:	91 30       	cpi	r25, 0x01	; 1
 710:	99 f4       	brne	.+38     	; 0x738 <main+0x268>
 712:	9d 81       	ldd	r25, Y+5	; 0x05
 714:	91 11       	cpse	r25, r1
 716:	10 c0       	rjmp	.+32     	; 0x738 <main+0x268>
		{
			LCD_clear();
 718:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
			
			LCD_writeString(string5);
 71c:	85 e9       	ldi	r24, 0x95	; 149
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 724:	2f ef       	ldi	r18, 0xFF	; 255
 726:	83 ed       	ldi	r24, 0xD3	; 211
 728:	90 e3       	ldi	r25, 0x30	; 48
 72a:	21 50       	subi	r18, 0x01	; 1
 72c:	80 40       	sbci	r24, 0x00	; 0
 72e:	90 40       	sbci	r25, 0x00	; 0
 730:	e1 f7       	brne	.-8      	; 0x72a <main+0x25a>
 732:	00 c0       	rjmp	.+0      	; 0x734 <main+0x264>
 734:	00 00       	nop
 736:	2d cf       	rjmp	.-422    	; 0x592 <main+0xc2>
		
			_delay_ms(1000);
			
		}
		/////////////////////////////////////////////////////////////
		else if  (A0 && B0 && C1 && D1 && E0)
 738:	81 11       	cpse	r24, r1
 73a:	1c c0       	rjmp	.+56     	; 0x774 <main+0x2a4>
 73c:	9a 81       	ldd	r25, Y+2	; 0x02
 73e:	91 11       	cpse	r25, r1
 740:	19 c0       	rjmp	.+50     	; 0x774 <main+0x2a4>
 742:	9b 81       	ldd	r25, Y+3	; 0x03
 744:	91 30       	cpi	r25, 0x01	; 1
 746:	b1 f4       	brne	.+44     	; 0x774 <main+0x2a4>
 748:	9c 81       	ldd	r25, Y+4	; 0x04
 74a:	91 30       	cpi	r25, 0x01	; 1
 74c:	99 f4       	brne	.+38     	; 0x774 <main+0x2a4>
 74e:	9d 81       	ldd	r25, Y+5	; 0x05
 750:	91 11       	cpse	r25, r1
 752:	10 c0       	rjmp	.+32     	; 0x774 <main+0x2a4>
		{
			LCD_clear();
 754:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
			
			LCD_writeString(string6);
 758:	85 ea       	ldi	r24, 0xA5	; 165
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 760:	2f ef       	ldi	r18, 0xFF	; 255
 762:	83 ed       	ldi	r24, 0xD3	; 211
 764:	90 e3       	ldi	r25, 0x30	; 48
 766:	21 50       	subi	r18, 0x01	; 1
 768:	80 40       	sbci	r24, 0x00	; 0
 76a:	90 40       	sbci	r25, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <main+0x296>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <main+0x2a0>
 770:	00 00       	nop
 772:	0f cf       	rjmp	.-482    	; 0x592 <main+0xc2>
			
			_delay_ms(1000);
		
		}
		//////////////////////////////////////////////////////////////////
		else if  (A1 && B0 && C1 && D1 && E0)
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	09 f0       	breq	.+2      	; 0x77a <main+0x2aa>
 778:	0c cf       	rjmp	.-488    	; 0x592 <main+0xc2>
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	81 11       	cpse	r24, r1
 77e:	09 cf       	rjmp	.-494    	; 0x592 <main+0xc2>
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	09 f0       	breq	.+2      	; 0x788 <main+0x2b8>
 786:	05 cf       	rjmp	.-502    	; 0x592 <main+0xc2>
 788:	8c 81       	ldd	r24, Y+4	; 0x04
 78a:	81 30       	cpi	r24, 0x01	; 1
 78c:	09 f0       	breq	.+2      	; 0x790 <main+0x2c0>
 78e:	01 cf       	rjmp	.-510    	; 0x592 <main+0xc2>
 790:	8d 81       	ldd	r24, Y+5	; 0x05
 792:	81 11       	cpse	r24, r1
 794:	fe ce       	rjmp	.-516    	; 0x592 <main+0xc2>
		{
			LCD_clear();
 796:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_clear>
			
			LCD_writeString(string7);
 79a:	80 eb       	ldi	r24, 0xB0	; 176
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_writeString>
 7a2:	2f ef       	ldi	r18, 0xFF	; 255
 7a4:	83 ed       	ldi	r24, 0xD3	; 211
 7a6:	90 e3       	ldi	r25, 0x30	; 48
 7a8:	21 50       	subi	r18, 0x01	; 1
 7aa:	80 40       	sbci	r24, 0x00	; 0
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x2d8>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x2e2>
 7b2:	00 00       	nop
 7b4:	ee ce       	rjmp	.-548    	; 0x592 <main+0xc2>

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
